<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[百度短链接-go]]></title>
      <url>/2021/09/28/%E7%99%BE%E5%BA%A6%E7%9F%AD%E9%93%BE%E6%8E%A5-go/</url>
      <content type="html"><![CDATA[<p>某业务需要把大量的长链接转换为短链接，当时正在学习go，就试了一下，逻辑是从excel（只有一列，存放待转换的长链接）读取长链接，然后分批次（百度这个口支持每次200条）调用百度长连接转短链接api，返回结果存放到log.csv,如果有错误的写到fail.csv里面。下面是代码：</p>
<pre><code>package main

import (
    &quot;bufio&quot;
    &quot;bytes&quot;
    &quot;crypto/tls&quot;
    &quot;encoding/csv&quot;
    &quot;encoding/json&quot;
    &quot;fmt&quot;
    &quot;io/ioutil&quot;
    &quot;log&quot;
    &quot;net/http&quot;
    &quot;os&quot;
    &quot;path/filepath&quot;
    &quot;strconv&quot;
    &quot;sync&quot;
    &quot;time&quot;

    &quot;github.com/tealeg/xlsx&quot;
)

var (
    // longURLs  chan string
    // shortURLs chan string
    longURLs []string
    //shortURLs []string
    shortURLs []map[string]interface&#123;&#125;
    waitGroup sync.WaitGroup
    logFile   *os.File
    failFile  *os.File
    count     int = 0
)

//struct 相当于一个实体
type param struct &#123;
    LongURL      string
    TermOfValidity string
&#125;

type result struct &#123;
    Code      string
    ShortUrls []string
    ErrMsg    string
&#125;

//读取excel 把第一列长连接放入管道
func readExcle(excelPath string) &#123;
    excel, err := xlsx.OpenFile(excelPath)
    if err != nil &#123;
        fmt.Println(&quot;读取：&quot; + excelPath + &quot; 错误&quot;)
    &#125;
    for _, sheet := range excel.Sheets &#123;
        i := 0
        for _, row := range sheet.Rows &#123;
            i++
            if i == 1 &#123;
                continue
            &#125;
            j := 0
            for _, cell := range row.Cells &#123;
                j++
                if j == 1 &#123;
                    //fmt.Println(cell.Value)
                    //longURLs &lt;- cell.Value
                    longURLs = append(longURLs, cell.Value)
                &#125; else &#123;
                    continue
                &#125;
            &#125;
        &#125;
    &#125;
    getShortURL()
&#125;

//请求接口把 长连接 转换为短链接 200个发一次请求
func getShortURL() &#123;
    start := 0
    end := 0
    limit := 200
    size := len(longURLs)
    num := 0
    if size%limit == 0 &#123;
        num = size / limit
    &#125; else &#123;
        num = size/limit + 1
    &#125;
    for i := 1; i &lt;= num; i++ &#123;
        urls := []string&#123;&#125;
        start = (i - 1) * limit
        if i*limit &gt; size &#123;
            end = size
        &#125; else &#123;
            end = i * limit
        &#125;
        urls = longURLs[start:end]
        waitGroup.Add(1)
        go request(urls)
        //&lt;-longURLs
    &#125;
    waitGroup.Done()
&#125;

//发送请求 
func request(urls []string) &#123;
    var params []param
    for _, url := range urls &#123;
        param := param&#123;
            LongURL:        url,
            TermOfValidity: &quot;1-year&quot;, //链接一年有效
        &#125;
        params = append(params, param)
    &#125;

    jsonBytes, err := json.Marshal(params)
    if err != nil &#123;
        fmt.Println(&quot;转换json错误&quot;)
    &#125;

    transCfg := &amp;http.Transport&#123;
        TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: true&#125;, // disable verify
    &#125;

    client := &amp;http.Client&#123;Transport: transCfg&#125;

    req, _ := http.NewRequest(&quot;POST&quot;, &quot;https://dwz.cn/api/v3/short-urls&quot;, bytes.NewReader(jsonBytes))

    req.Header.Set(&quot;Dwz-Token&quot;, &quot;&quot;) //需修改
    req.Header.Set(&quot;Connection&quot;, &quot;Keep-Alive&quot;)
    req.Header.Set(&quot;Charset&quot;, &quot;UTF-8&quot;)
    req.Header.Set(&quot;accept&quot;, &quot;application/json&quot;)
    req.Header.Set(&quot;Content-Type&quot;, &quot;application/json;charset=UTF-8&quot;)
    req.Header.Set(&quot;Content-Length&quot;, strconv.Itoa(len(jsonBytes)))
    res, err := client.Do(req)

    if err != nil &#123;
        //fmt.Println(&quot;返回错误：&quot;)
        //fmt.Println(err)
        //request(urls)
        waitGroup.Add(1)
        appendToErrLog(urls)
    &#125; else &#123;
        if res.StatusCode != 200 &#123;
            //fmt.Println(res.Status)
            waitGroup.Add(1)
            appendToErrLog(urls)
        &#125; else &#123;
            resBytes, err := ioutil.ReadAll(res.Body)

            if err != nil &#123;
                //fmt.Println(&quot;解析错误&quot;)
                //request(urls)
                waitGroup.Add(1)
                appendToErrLog(urls)
            &#125; else &#123;
                var jsonObj map[string]interface&#123;&#125;
                json.Unmarshal(resBytes, &amp;jsonObj)
                //fmt.Println(&quot;结果&quot;, jsonObj)
                shortUrls := jsonObj[&quot;ShortUrls&quot;].([]interface&#123;&#125;)
                waitGroup.Add(1)
                appendToLog(shortUrls)
            &#125;
        &#125;
    &#125;
    waitGroup.Done()
&#125;

//日志
func appendToLog(shortUrls []interface&#123;&#125;) &#123;
    w := csv.NewWriter(logFile)
    datas := make([][]string, 200)
    for i, item := range shortUrls &#123;
        shortURL := item.(map[string]interface&#123;&#125;)
        shortURLs = append(shortURLs, item.(map[string]interface&#123;&#125;))
        //shortURLs = append(shortURLs, shortURL[&quot;ShortUrl&quot;].(string))
        datas[i] = []string&#123;shortURL[&quot;LongUrl&quot;].(string), shortURL[&quot;ShortUrl&quot;].(string)&#125;
    &#125;
    w.WriteAll(datas)
    w.Flush()
    count += len(shortUrls)
    waitGroup.Done()
&#125;

//错误日志
func appendToErrLog(urls []string) &#123;
    w := csv.NewWriter(logFile)
    datas := make([][]string, 200)
    for i, URL := range urls &#123;
        datas[i] = []string&#123;URL&#125;
    &#125;
    w.WriteAll(datas)
    w.Flush()
    count += 200
    waitGroup.Done()
&#125;

func main() &#123;
    //longURLs = make(chan string, 100)
    fmt.Println(&quot;拖动xlsx文件到此,然后回车&quot;)
    scanner := bufio.NewScanner(os.Stdin)
    scanner.Scan()
    filePath := scanner.Text()

    start := time.Now()
    currentPath, err := os.Executable()
    if err != nil &#123;
        log.Println(&quot;获取当前文件夹错误&quot;)
    &#125;
    logPath := filepath.Dir(currentPath) + &quot;\\log.csv&quot;
    _, err = os.Stat(logPath)
    if os.IsNotExist(err) &#123;
        logFile, err = os.Create(logPath)
        if err != nil &#123;
            log.Println(&quot;创建log.csv文件错误&quot;)
        &#125;
    &#125; else &#123;
        logFile, err = os.OpenFile(logPath, os.O_APPEND|os.O_RDWR, 0666)
        if err != nil &#123;
            log.Println(&quot;打开log.csv文件错误&quot;)
        &#125;
    &#125;

    failPath := filepath.Dir(currentPath) + &quot;\\fail.csv&quot;
    _, err = os.Stat(failPath)
    if os.IsNotExist(err) &#123;
        failFile, err = os.Create(failPath)
        if err != nil &#123;
            log.Println(&quot;fail.csv文件错误&quot;)
        &#125;
    &#125; else &#123;
        failFile, err = os.OpenFile(failPath, os.O_APPEND|os.O_RDWR, 0666)
        if err != nil &#123;
            log.Println(&quot;fail.csv文件错误&quot;)
        &#125;
    &#125;

    //logFile.WriteString(&quot;\xEF\xBB\xBF&quot;)  // 写入一个UTF-8 BOM

    defer logFile.Close()
    defer failFile.Close()

    waitGroup.Add(1)
    readExcle(filePath)

    waitGroup.Wait()

    cost := time.Since(start)
    fmt.Printf(&quot;共%d条数据,成功%d条,用时%s\n&quot;, len(longURLs), count, cost)

    time.Sleep(5 * time.Second)
    //waitGroup.Wait()
&#125;
</code></pre>]]></content>
      
        <categories>
            
            <category> go </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[弹幕聊天]]></title>
      <url>/2021/09/28/%E5%BC%B9%E5%B9%95%E8%81%8A%E5%A4%A9/</url>
      <content type="html"><![CDATA[<p><img src="/images/danmu1.jpeg" alt="弹幕"></p>
<h3 id="用到的技术："><a href="#用到的技术：" class="headerlink" title="用到的技术："></a>用到的技术：</h3><h4 id="html-css-js-websocket：jquery-barrager，bootstrap，tinycolor-等js"><a href="#html-css-js-websocket：jquery-barrager，bootstrap，tinycolor-等js" class="headerlink" title="html+css+js+websocket：jquery.barrager，bootstrap，tinycolor 等js"></a>html+css+js+websocket：jquery.barrager，bootstrap，tinycolor 等js</h4><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>nodejs启动一个websocket服务，代码如下 </p>
<h5 id="server-js："><a href="#server-js：" class="headerlink" title="server.js："></a>server.js：</h5><pre><code>//引入nodejs-websocket
const ws = require(&#39;nodejs-websocket&#39;);

//在线列表
const userList = new Set();

function broadcast(message)&#123;
    //接受客户端传来的消息
    server.connections.forEach((conn) =&gt; &#123;
        //sendText 服务端发送给客户端方法
        let msg = JSON.parse(message);
        //只有from 没有to 群发
        if(!msg.to)&#123;
            conn.sendText(message);    
        &#125;else&#123;
            if(msg.to == conn.id)&#123;
                conn.sendText(message);  
            &#125;
        &#125;    
    &#125;);
&#125;

//启动服务
const server = ws.createServer((conn) =&gt; &#123;
    //接收消息
    conn.on(&#39;text&#39;, (str) =&gt; &#123;
        let msg = JSON.parse(str);
        //没有to
        if(!msg.to)&#123;
            //有新加入 更新列表
            if(&quot;join&quot; == msg.type)&#123;
                userList.add(msg.from);
                conn.id = msg.from;
                broadcast(&quot;&#123;\&quot;userList\&quot;:\&quot;&quot;+Array.from(userList).toString()+&quot;\&quot;,\&quot;type\&quot;:\&quot;join\&quot;&#125;&quot;);    
            &#125;if(&quot;leave&quot; == msg.type)&#123;
                //有离开 更新列表
                userList.delete(msg.from);
                broadcast(&quot;&#123;\&quot;userList\&quot;:\&quot;&quot;+Array.from(userList).toString()+&quot;\&quot;,\&quot;type\&quot;:\&quot;leave\&quot;&#125;&quot;);    
            &#125;else&#123;
                //有to 广播
                broadcast(str);    
            &#125;    
        &#125;else&#123;
            broadcast(str);    
        &#125;
    &#125;);

    //退出
    conn.on(&quot;close&quot;, (str) =&gt; &#123;

    &#125;);
    conn.on(&#39;error&#39;, (err) =&gt; &#123;
        //判断错误，假如不判断的话 会断开连接
        console.log(&quot;err:&quot;+err);
    &#125;);
&#125;).listen(8001);

console.log(&quot;程序已启动，端口8001&quot;);
</code></pre><p>启动：node server.js</p>
<h5 id="后台启动可以使用-pm2"><a href="#后台启动可以使用-pm2" class="headerlink" title="后台启动可以使用 pm2"></a>后台启动可以使用 pm2</h5><pre><code>npm install -g pm2
pm2 start
</code></pre><p><img src="/images/pm2.png" alt="弹幕"><br>pm2 常用命令总结：</p>
<pre><code>pm2 logs 显示所有进程日志
pm2 stop all 停止所有进程
pm2 restart all 重启所有进程
pm2 reload all 0秒停机重载进程 (用于 NETWORKED 进程)
pm2 stop 0 停止指定的进程
pm2 restart 0 重启指定的进程
pm2 startup 产生 init 脚本 保持进程活着
pm2 web 运行健壮的 computer API endpoint (http://localhost:8001)
pm2 delete 0 杀死指定的进程
pm2 delete all 杀死全部进程
</code></pre><p>运行进程的不同方式：</p>
<pre><code>pm2 start app.js -i max 根据有效CPU数目启动最大进程数目
pm2 start app.js -i 3 启动3个进程
pm2 start app.js -x 用fork模式启动 app.js 而不是使用 cluster
pm2 start app.js -x -- -a 23 用fork模式启动 app.js 并且传递参数 (-a 23)
pm2 start app.js --name serverone 启动一个进程并把它命名为 serverone
pm2 stop serverone 停止 serverone 进程
pm2 start app.json 启动进程, 在 app.json里设置选项
pm2 start app.js -i max -- -a 23 在--之后给 app.js 传递参数
pm2 start app.js -i max -e err.log -o out.log 启动 并 生成一个配置文件
</code></pre><hr>
<h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><h5 id="index-js："><a href="#index-js：" class="headerlink" title="index.js："></a>index.js：</h5><pre><code>//uuid 用于区分自己和他人
if(window.localStorage)&#123;
    localStorage = window.localStorage;
    if(!localStorage[&#39;uid&#39;])&#123;
        localStorage.setItem(&quot;uid&quot;,guid());
    &#125;    
&#125;

//连接 webSocket server
var wsServer = &#39;ws://localhost:8001&#39;;
var websocket= new WebSocket(wsServer);

websocket.onclose = function (evt) &#123;
        console.log(&quot;Disconnected&quot;);
    &#125;;

    websocket.onmessage = function (evt) &#123;

        var data = JSON.parse(evt.data);

        //系统消息
        if(&quot;join&quot; == data.type || &quot;leave&quot; == data.type)&#123;
            //用户列表
            if(data.userList)&#123;
                $(&quot;#userList&quot;).html(&quot;&quot;);
                var userList = data.userList.split(&quot;,&quot;);
                $.each(userList,function(index,item)&#123;
                    if(localStorage[&quot;uid&quot;] == item)&#123;
                        $(&quot;#userList&quot;).append(&quot;&lt;li id=\&quot;&quot;+item+&quot;\&quot;&gt;自己&lt;/lli&gt;&quot;);
                    &#125;else&#123;
                        $(&quot;#userList&quot;).append(&quot;&lt;li id=\&quot;&quot;+item+&quot;\&quot;&gt;&quot;+item+&quot;&lt;/lli&gt;&quot;);
                    &#125;    
                &#125;);

                var uid = null;
                //点击用户 发私信
                $(&quot;#userList li&quot;).on(&quot;click&quot;,function()&#123;
                    if(uid == $(&quot;#uid&quot;).val())&#123;
                        $(&quot;#uid&quot;).val(&quot;&quot;);
                    &#125;else&#123;
                        uid = $(this).attr(&quot;id&quot;);
                        $(&quot;#uid&quot;).val(uid);
                    &#125;
                &#125;);
            &#125;
        &#125;else&#123;

            var item = data.msg;

            //自己发的
            if(data.from == localStorage[&quot;uid&quot;])&#123;
                item.info = &quot;&lt;span style=&#39;border:1px solid white;&#39;&gt;&quot;+item.info+&quot;&lt;/span&gt;&quot;;
            &#125;

            $(&#39;body&#39;).barrager(item);

         //一些彩蛋
            if(&quot;抖动&quot; == item.info)&#123;
                $(&quot;body&quot;).addClass(&quot;shake shake-crazy&quot;);
            &#125;
            if(&quot;反转&quot; == item.info || &quot;翻转&quot; == item.info)&#123;
                var reversal = document.getElementById(&quot;reversal&quot;);
                reversal.innerHTML = &quot;&lt;style type=&#39;text/css&#39;&gt; html &#123; filter: fliph; /* for ie */&#125; body &#123; transform: rotateY(180deg); /* css3 */ -moz-transform:skew(0deg, 180deg) scale(-1, 1); /* for ff */ -webkit-transform: rotateY(180deg); /* for chrome and safari */ -o-transform:skew(0deg, 180deg) scale(-1, 1); /* for opera */ overflow-x:hidden; &#125;&lt;/style&gt;&quot;;
            &#125;
            if(&quot;恢复&quot; == item.info)&#123;
                $(&quot;body&quot;).removeClass(&quot;shake shake-crazy&quot;);
                document.getElementById(&quot;reversal&quot;).innerHTML = &quot;&quot;;
            &#125;
        &#125;        
    &#125;;

    websocket.onerror = function (evt, e) &#123;
        console.log(&#39;Error occured: &#39; + evt.data);
    &#125;;
</code></pre><p>其他详细内容请到GitHub中的danmu项目查看。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> websocket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tomcat重启python发送邮件]]></title>
      <url>/2021/09/28/tomcat%E9%87%8D%E5%90%AFpython%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>restart8080.sh</p>
<pre><code>#!/bin/bash
./etc/profile
tomcatPath=&quot;/opt/tomcat-8080&quot;
binPath=&quot;$tomcatPath/bin&quot;
echo &quot;[info][$(date +&#39;%F %H:%M:%S&#39;)]正在监控tomcat，路径：$tomcatPath&quot;
pid=`ps -ef | grep tomcat | grep -w $tomcatPath | grep -v &#39;grep&#39; | awk &#39;&#123;print $2&#125;&#39;`
if [ -n &quot;$pid&quot; ]; then
  echo &quot;[info][$(date +&#39;%F %H:%M:%S&#39;)]tomcat进程为：$pid&quot;
  echo &quot;[info][$(date +&#39;%F %H:%M:%S&#39;)]tomcat已经启动，准备使用shutdown命令关闭...&quot;
  $binPath&quot;/shutdown.sh&quot;
  sleep 2

  pid=`ps -ef | grep tomcat | grep -w $tomcatPath | grep -v &#39;grep&#39; | awk &#39;&#123;print $2&#125;&#39;`
  if [ -n &quot;$pid&quot; ]; then
    echo &quot;[info][$(date +&#39;%F %H:%M:%S&#39;)]使用shutdown命令关闭失败，准备kill进程...&quot;
    kill -9 $pid
    echo &quot;[info][$(date +&#39;%F %H:%M:%S&#39;)]kill进程完毕！&quot;
    sleep 5
  else
    echo &quot;[info][$(date +&#39;%F %H:%M:%S&#39;)]使用shutdown命令关闭成功！&quot;
  fi
else
  echo &quot;[info][$(date +&#39;%F %H:%M:%S&#39;)]tomcat未启动！&quot;
fi
echo &quot;[info][$(date +&#39;%F %H:%M:%S&#39;)]准备启动tomcat...&quot;
$binPath&quot;/startup.sh&quot;
#发送重启邮件
python sendMail.py &quot;tomcat-8080 start at $(date +&#39;%F %H:%M:%S&#39;)&quot;
</code></pre><p>sendMail.py</p>
<pre><code>#!/usr/bin/python
# -*- coding: UTF-8 -*-

import sys
import smtplib
from email.mime.text import MIMEText
from email.header import Header

content = sys.argv[1]
print(content)

#第三方 SMTP 服务
mail_host=&quot;&quot; #设置服务器
mail_user=&quot;&quot;  #用户名
mail_pass=&quot;&quot;  #口令 

sender = &#39;&#39; #发送者名称
receivers = [&#39;&#39;]  #接收邮件，可设置为你的QQ邮箱或者其他邮箱，多个逗号隔开

message = MIMEText(content, &#39;plain&#39;, &#39;utf-8&#39;)
message[&#39;From&#39;] = Header(&quot;&quot;, &#39;utf-8&#39;) #需修改
message[&#39;To&#39;] =  Header(&quot;&quot;, &#39;utf-8&#39;) #需修改

subject = &#39;&#39; #需修改
message[&#39;Subject&#39;] = Header(subject, &#39;utf-8&#39;)


try:
    smtpObj = smtplib.SMTP_SSL() 
    smtpObj.connect(mail_host, 465)    #25 为 SMTP 端口号
    smtpObj.login(mail_user,mail_pass)  
    smtpObj.sendmail(sender, receivers, message.as_string())
    print &quot;邮件发送成功&quot;
except smtplib.SMTPException,e:
    print &quot;Error: 无法发送邮件&quot;
    print str(e)
</code></pre>]]></content>
      
        <categories>
            
            <category> 运维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[esp8266 smartConfit]]></title>
      <url>/2021/01/08/esp8266-smartConfit/</url>
      <content type="html"><![CDATA[<p>1.开机去读取本机的/wifis.json文件里面的默认wifi去链接<br>2.如果都链接不成功，开启smartConfig<br>3.smartConfig不成功，自己开启wifi，连接后可控制板载led</p>
<pre><code>#include &lt;Arduino.h&gt;
#include &lt;ArduinoJson.h&gt;
#include &lt;ESP8266WiFi.h&gt;
#include &lt;ESP8266WiFiMulti.h&gt;
#include &lt;ESP8266WebServer.h&gt;
#include &lt;FS.h&gt;

ESP8266WiFiMulti wifiMulti;
DynamicJsonBuffer djb;

ESP8266WebServer server(80);

void smartConfig() &#123;
  //切换模式
  WiFi.mode(WIFI_STA);
  Serial.println(&quot;waitting for SmartConfig...&quot;);

  //开启smartConfig模式
  WiFi.beginSmartConfig();
  int i = 0;

  //等待
  while (!WiFi.smartConfigDone()) &#123;
    Serial.print(&quot;.&quot;);
    delay(1000);

    i++;

    //超时
    if (i == 30) &#123;
      Serial.println(&quot;smartConfig timeout 30s&quot;);
      WiFi.stopSmartConfig();
      break;
    &#125;
  &#125;

  //连接到了wifi 打印 写入配置文件
  if (wifiMulti.run() == WL_CONNECTED) &#123;
    Serial.println(&quot;smartConfig success&quot;);
    Serial.printf(&quot;SSID:%s\r\n&quot;, WiFi.SSID().c_str());
    Serial.printf(&quot;PSW:%s\r\n&quot;, WiFi.psk().c_str());
    wifiMulti.addAP(WiFi.SSID().c_str(), WiFi.psk().c_str());
    writeFile(WiFi.SSID().c_str(), WiFi.psk().c_str());
    ledCtrl(&quot;on&quot;);
  &#125; else &#123;
    //配置文件里面都不能连接 配置为服务器模式
    IPAddress softLocal(192, 168, 1, 1);
    IPAddress softGateway(192, 168, 1, 1);
    IPAddress softSubnet(255, 255, 255, 0);
    WiFi.softAPConfig(softLocal, softGateway, softSubnet);
    WiFi.softAP(&quot;esp8266-192.168.1.1&quot;, &quot;esp8266666&quot;);

    startServer();
  &#125;
&#125;

/**
   开始页面
*/
void homepage() &#123;
  String filecontend = readFile(&quot;/index.html&quot;);
  if (filecontend) &#123;
    server.send(200, &quot;text/html&quot;, filecontend);
  &#125; else &#123;
    Serial.println(&quot;index.html is empty&quot;);
  &#125;
&#125;

/**
 * 控制等
 */
void pin() &#123;
  String type = &quot;&quot;;
  if (server.arg(&quot;light&quot;) == &quot;on&quot;) &#123;
    type = &quot;on&quot;;
  &#125; else if (server.arg(&quot;light&quot;) == &quot;off&quot;) &#123;
    type = &quot;off&quot;;
  &#125;
  server.send(200, &quot;text/html&quot;, type);
  ledCtrl(type);
&#125;

/**
   启动服务
*/
void startServer() &#123;
  server.on(&quot;/&quot;, homepage);
  server.on(&quot;/pin&quot;, pin);
  server.begin();
  Serial.println(&quot;&quot;);
  Serial.print(&quot;server start on http://&quot;);
  Serial.print(WiFi.softAPIP());
  Serial.println(&quot;:80&quot;);
&#125;

/**
   把已连接的wifi 写入配置文件
*/
void writeFile(String ssid, String pwd) &#123;
  String fileContent = readFile(&quot;/wifis.json&quot;);
  if (fileContent != &quot;&quot;) &#123;
    JsonObject&amp; jo = djb.parse(fileContent);
    if (jo.containsKey(&quot;wifis&quot;)) &#123;
      JsonArray&amp; ja = jo[&quot;wifis&quot;];
      JsonObject&amp; newObj = djb.createObject();
      newObj[&quot;ssid&quot;] = ssid;
      newObj[&quot;pwd&quot;] = pwd;
      ja.add(newObj);
      //jo = djb.createObject();
      jo[&quot;wifis&quot;] = ja;
      File jsonFile = SPIFFS.open(&quot;/wifis.json&quot;, &quot;w+&quot;);
      if (jsonFile) &#123;
        jsonFile.print(jo.printTo(jsonFile));
        //打印
        jo.printTo(Serial);
      &#125; else &#123;
        Serial.println(&quot;wifis.json write failed&quot;);
      &#125;

      jsonFile.close();
    &#125;
  &#125;
&#125;

/**
   读取文件 返回文件内容
*/
String readFile(String filename) &#123;
  if (SPIFFS.begin()) &#123;
    Serial.println(&quot;SPIFFS started&quot;);
  &#125; else &#123;
    Serial.println(&quot;SPIFFS start failed&quot;);
  &#125;

  if (SPIFFS.exists(filename)) &#123;
    Serial.print(filename);
    Serial.println(&quot; Found ...&quot;);
  &#125; else &#123;
    Serial.print(filename);
    Serial.println(&quot; Not Found ...&quot;);
  &#125;
  File file = SPIFFS.open(filename, &quot;r&quot;);
  if (!file) &#123;
    Serial.println(filename + &quot;open failed&quot;);
  &#125;
  String fileContent = &quot;&quot;;
  if (file.size() &gt; 0) &#123;
    for (int i = 0; i &lt; file.size(); i++) &#123;
      fileContent += (char)file.read();
    &#125;

    Serial.println(fileContent);
  &#125; else &#123;
    Serial.println(filename + &quot; is empty&quot;);
  &#125;
  file.close();
  return fileContent;
&#125;

void setup() &#123;
  Serial.begin(2000000);
  //板载灯
  pinMode(LED_BUILTIN, OUTPUT);
  Serial.println();
  Serial.println(&quot;start to config&quot;);
  wifiMulti.run();

  //判断是否已自动连接到wifi
  if (wifiMulti.run() == WL_CONNECTED) &#123;
    Serial.print(&quot;&quot;);
    Serial.println(&quot;connect success&quot;);
    Serial.println(&quot;ip:&quot;);
    Serial.println(WiFi.localIP());
  &#125; else if (wifiMulti.run() != WL_CONNECTED) &#123;
    Serial.println(&quot;not connected&quot;);
    //先判断wifis.json是否有记录 有 读取 没有 smartConfig

    String fileContent = readFile(&quot;/wifis.json&quot;);
    if (fileContent != &quot;&quot;) &#123;
      WiFi.mode(WIFI_STA);
      JsonObject&amp; jo = djb.parse(fileContent);
      if (jo.containsKey(&quot;wifis&quot;)) &#123;
        JsonArray&amp; ja = jo[&quot;wifis&quot;];
        const char* ssid;
        const char* pwd;
        for (int i = 0; i &lt; ja.size(); i++) &#123;
          ssid = ja[i][&quot;ssid&quot;];
          pwd = ja[i][&quot;pwd&quot;];
          wifiMulti.addAP(ssid, pwd);
          Serial.println(&quot;connect by wifis.json&quot;);
          Serial.print(&quot;ssid:&quot;);
          Serial.println(ssid);
          Serial.print(&quot;pwd:&quot;);
          Serial.println(pwd);
          int j = 0;
          while (wifiMulti.run() != WL_CONNECTED) &#123;
            delay(500);
            j ++;
            //等待20s
            if (j == 20) &#123;
              Serial.print(&quot;connect to &quot;);
              Serial.print(ssid);
              Serial.println(&quot; failed:timeout 20s&quot;);
              break;
            &#125;
          &#125;

          //连接到了wifi 打印ip
          if (wifiMulti.run() == WL_CONNECTED) &#123;
            Serial.println(&quot;connect success&quot;);
            Serial.println(&quot;ip:&quot;);
            Serial.println(WiFi.localIP());
            ledCtrl(&quot;on&quot;);
          &#125;
        &#125;
      &#125; else &#123;
        Serial.println(&quot;wifis.json is empty&quot;);
      &#125;
    &#125;

    //从配置文件读取失败 开始smartConfig 配置
    if (wifiMulti.run() != WL_CONNECTED) &#123;
      smartConfig();
    &#125;
  &#125;
&#125;

void ledCtrl(String type) &#123;
  if (type == &quot;on&quot;) &#123;
    digitalWrite(LED_BUILTIN, LOW);
  &#125; else if (type == &quot;off&quot;) &#123;
    digitalWrite(LED_BUILTIN, HIGH);
  &#125;
&#125;

void loop() &#123;
  //监听客户请求并处理
  server.handleClient();
&#125;
</code></pre>]]></content>
      
        <categories>
            
            <category> mcu </category>
            
        </categories>
        
        
        <tags>
            
            <tag> esp8266 smartConfig </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql]]></title>
      <url>/2019/10/28/mysql/</url>
      <content type="html"><![CDATA[<h1 id="1-mysql-按in条件中的字段排序"><a href="#1-mysql-按in条件中的字段排序" class="headerlink" title="1.mysql 按in条件中的字段排序"></a>1.mysql 按in条件中的字段排序</h1><pre><code>SELECT * FROM 表名 WHERE id in(值) order by field(字段,值);
</code></pre><h1 id="2-查询按照分组将多条记录转换成单条记录的"><a href="#2-查询按照分组将多条记录转换成单条记录的" class="headerlink" title="2.查询按照分组将多条记录转换成单条记录的"></a>2.查询按照分组将多条记录转换成单条记录的</h1><pre><code>group_concat([DISTINCT] 要连接的字段 [Order BY ASC/DESC 排序字段][Separator &#39;分隔符&#39;])
</code></pre><p>查询后字段是有长度的，可以执行以下语句进行查询:</p>
<pre><code>show variables like &#39;group_concat_max_len&#39;;
</code></pre><p>修改的方式有两种：</p>
<p>(1).在my.ini [mysql]后面加入 （需重启）：</p>
<pre><code>group_concat_max_len = 102400000&#39;;
</code></pre><p>(2).执行以下语句（重启失效）：</p>
<pre><code>SET GLOBAL group_concat_max_len = 1024000;
</code></pre><h1 id="3-This-function-has-none-of-DETERMINISTIC-NO-SQL"><a href="#3-This-function-has-none-of-DETERMINISTIC-NO-SQL" class="headerlink" title="3.This function has none of DETERMINISTIC, NO SQL"></a>3.This function has none of DETERMINISTIC, NO SQL</h1><pre><code>SET GLOBAL log_bin_trust_function_creators = 1;
</code></pre><h1 id="4-锁表有关"><a href="#4-锁表有关" class="headerlink" title="4.锁表有关"></a>4.锁表有关</h1><p>  – 查询是否锁表</p>
<pre><code>SHOW OPEN TABLES WHERE In_use &gt; 0;
</code></pre><p>– 查看所有进程</p>
<pre><code>SHOW PROCESSLIST;
SHOW FULL PROCESSLIST;
</code></pre><p>  – 杀掉指定mysql连接的进程号</p>
<pre><code>KILL 178;
</code></pre><p>  – 拼写多个时间大于x的kill语句</p>
<pre><code>SELECT CONCAT(&#39;kill &#39;, id,&#39;;&#39;) FROM information_schema.PROCESSLIST WHERE time &gt; 100;
</code></pre><p>  – 查看正在锁的事务</p>
<pre><code>SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS;
</code></pre><p>  – 查看等待锁的事务</p>
<pre><code>SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;
</code></pre><p>  – 查看innodb引擎的运行时信息</p>
<pre><code>SHOW engine innodb status;
</code></pre><p>  – 查看造成死锁的sql语句，分析索引情况，然后优化sql语句</p>
<p>  – 查看服务器状态</p>
<pre><code>SHOW STATUS LIKE &#39;%lock%&#39;;
</code></pre><p>  – 查看超时时间：</p>
<pre><code>SHOW VARIABLES LIKE &#39;%timeout%&#39;;
</code></pre><p>  – 拼写多个被锁的kill语句</p>
<pre><code>select concat(&#39;kill &#39;, id,&#39;;&#39;) from information_schema.processlist where state like &#39;%Locked%&#39;;
</code></pre><h1 id="5-uuid"><a href="#5-uuid" class="headerlink" title="5.uuid()"></a>5.uuid()</h1><pre><code>CREATE DEFINER=`root`@`%` FUNCTION `getUUID`() RETURNS varchar(50) CHARSET utf8
BEGIN
    DECLARE uuid varchar(50);
    select concat(DATE_FORMAT(NOW(),&#39;%Y%m%d%H%i%s&#39;),replace(uuid(),&#39;-&#39;,&#39;&#39;)) from dual INTO uuid;
    RETURN uuid;
END
</code></pre><h1 id="6-哪些表有大于N条数据"><a href="#6-哪些表有大于N条数据" class="headerlink" title="6.哪些表有大于N条数据"></a>6.哪些表有大于N条数据</h1><pre><code>USE information_schema;
SELECT TABLE_NAME ,TABLE_ROWS FROM TABLES WHERE TABLE_SCHEMA=&#39;库名&#39; AND TABLE_ROWS &gt; N ORDER BY TABLE_ROWS DESC;
</code></pre>]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql 语句 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python 人脸识别-Haar Cascade]]></title>
      <url>/2018/01/29/python-%E6%91%84%E5%83%8F%E5%A4%B4%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB-Haar-Cascade/</url>
      <content type="html"><![CDATA[<pre><code>#-*- coding: UTF-8 -*-
import cv2
import numpy as np

#打开1号摄像头
cap = cv2.VideoCapture(0)

#读取一桢图像，前一个返回值是是否成功，后一个返回值是图像本身
success, frame = cap.read()

#设置人脸框的颜色
color = (0,255,0)

#定义分类器
face_cascade = cv2.CascadeClassifier(&#39;../config/cv2/haarcascade_frontalface_alt.xml&#39;)


while success:
    success, frame = cap.read()

    #获得当前桢彩色图像的大小
    size = frame.shape[:2]

    #定义一个与当前桢图像大小相同的的灰度图像矩阵
    image = np.zeros(size,dtype=np.float16)

    #将当前桢图像转换成灰度图像（这里有修改）
    image = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    #灰度图像进行直方图等距化
    cv2.equalizeHist(image, image)

    #如下三行是设定最小图像的大小
    divisor =8
    h, w = size

    #这里加了一个取整函数
    minSize = (int(w/divisor), int(h/divisor))

    #人脸检测
    faces = face_cascade.detectMultiScale(
                                      image,
                                      scaleFactor=1.1,#表示在前后两次相继的扫描中，搜索窗口的比例系数。默认为1.1即每次搜索窗口依次扩大10%;
                                      minNeighbors=3,#表示构成检测目标的相邻矩形的最小个数(默认为3个)。如果组成检测目标的小矩形的个数和小于 min_neighbors - 1 都会被排除。如果min_neighbors 为 0, 则函数不做任何操作就返回所有的被检候选矩形框，这种设定值一般用在用户自定义对检测结果的组合程序上；
                                      minSize=minSize
                                      )

    #如果人脸数组长度大于0
    if len(faces) &gt; 0:
        for face in faces:
                #对每一个人脸画矩形框
                x, y, w, h = face
                cv2.rectangle(frame, (x, y), (x+w, y+h), color,2)
        print &#39;有人来了&#39;
    #显示图像
    cv2.imshow(&quot;test&quot;, frame)
    key = cv2.waitKey(10)
    c = chr(key &amp; 255)
    if c in [&#39;q&#39;, &#39;Q&#39;, chr(27)]:
        break
</code></pre>]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Haar Cascade </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello Hexo]]></title>
      <url>/2017/11/17/hello-world/</url>
      <content type="html"><![CDATA[<p>Hexo,终于弄好了！<br>1.安装nodejs<br>2.安装git<br>3.新建文件夹进入<br>sudo npm install -g hexo （切换淘宝镜像npm config set registry <a href="https://registry.npm.taobao.org，查看npm">https://registry.npm.taobao.org，查看npm</a> config get registry）<br>4.hexo init<br>5.hexo generate（hexo g）<br>6.修改 _config.yml<br>deploy:<br>     type: git<br>     repo: <a href="https://github.com/fanyushuai/fanyushuai.github.io.git（到gitgub新建repositories）">https://github.com/fanyushuai/fanyushuai.github.io.git（到gitgub新建repositories）</a><br>     branch: master<br>7.npm install hexo-deployer-git –save</p>
<p>8.hexo deploy<br>9.hexo server</p>
<p>注意：每次部署的步骤，可按以下三步来进行。<br>1.hexo clean<br>2.hexo generate<br>3.hexo deploy<br>一气呵成：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
